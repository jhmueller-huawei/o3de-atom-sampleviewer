/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup CompositeSrg : SRG_PerObject
{
	Texture2D m_inputTextureLeft;
	Texture2D m_inputTextureRight;
    uint32_t m_outputWidth;

	Sampler m_sampler
    {
        MaxAnisotropy = 16;
        AddressU = Wrap;
        AddressV = Wrap;
        AddressW = Wrap;
    };
    // TODO: Does this need padding?
}

struct VSInput 
{
	float3 m_position : POSITION;
	float2 m_uv : UV0;
};

struct VSOutput
{
	float4 m_position : SV_Position;
	float2 m_uv : UV0;
};

VSOutput MainVS(VSInput vsInput)
{
	VSOutput OUT;
    OUT.m_position = float4(vsInput.m_position, 1.0);
	OUT.m_uv = vsInput.m_uv;
	return OUT;
}

struct PSOutput
{
	float4 m_color : SV_Target0;
};

PSOutput MainPS(VSOutput psInput)
{
	PSOutput OUT;
    // TODO: Need proper size here
    if(psInput.m_position.x < CompositeSrg::m_outputWidth)
    {
        // OUT.m_color = float4(CompositeSrg::m_inputTextureLeft.Sample(CompositeSrg::m_sampler, psInput.m_uv).rgb, 1.0);
        OUT.m_color = float4(0.0, 1.0, 0.0, 1.0);
    }
    else
    {
        // OUT.m_color = float4(CompositeSrg::m_inputTextureRight.Sample(CompositeSrg::m_sampler, psInput.m_uv).rgb, 1.0);
        OUT.m_color = float4(1.0, 0.0, 0.0, 1.0);
    }
	return OUT;
}
